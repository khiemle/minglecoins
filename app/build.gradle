apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.akaita.android.easylauncher'

apply from: './code_quality_tools/quality.gradle'

android {
    signingConfigs {
        khiemle {
            keyAlias 'khiemle'
            keyPassword 'khiemle'
            storeFile file('khiemle.keystore')
            storePassword 'khiemle'
        }
    }
    compileSdkVersion 27
    dataBinding.enabled = true
    defaultConfig {
        applicationId "com.mingle.minglecoins"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ext.betaDistributionNotifications = true
        ext.betaDistributionReleaseNotes = "Notes\n" + getCommitMessages()
        ext.betaDistributionGroupAliases = "android-test-group"

    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        qa {
            minifyEnabled false
            signingConfig signingConfigs.khiemle
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "default"
    productFlavors {
        staging {
            dimension "default"
        }
        production {
            dimension "default"
        }
    }
}

easylauncher {
    iconNames "@mipmap/ic_launcher_foreground" // Traditional launcher icon
    foregroundIconNames "@drawable/ic_launcher_foreground" // Foreground of adaptive launcher icon

    defaultFlavorNaming = true // Use flavor name for default ribbon, instead of the type name

    productFlavors {
        staging {
            filters = redRibbonFilter("Staging")
        }
        production {
            filters = blueRibbonFilter("Prod")
        }
    }

    buildTypes {
        debug {
            enable true
        }
        qa {
            enable true
        }
        release {
            enable false
        }
    }

    variants {
        stagingQa {
            filters = orangeRibbonFilter("Staging-QA")
        }
        productionQa {
            filters = orangeRibbonFilter("Prod-QA")
        }
    }
}

def getCommitMessages() {
    def gitlog = 'git log 8cb6fb673cba081546d56260ebcc6963d0eaf509...HEAD --decorate'.execute().text
    if (gitlog.trim().length() > 0) return gitlog
    return 'git log -n 1 --decorate'.execute().text
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-vector-drawable:27.1.0'
    implementation 'com.android.support:support-v4:27.1.0'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    kapt 'com.android.databinding:compiler:3.1.1'
    implementation 'android.arch.lifecycle:runtime:1.1.0'
    implementation 'android.arch.lifecycle:extensions:1.1.0'
    kapt "android.arch.lifecycle:compiler:1.1.0"
    implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    compile 'com.squareup.retrofit2:retrofit:2.4.0'
    compile 'com.squareup.retrofit2:converter-gson:2.4.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'
}
